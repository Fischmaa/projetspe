# Librairies nécessaires :
library("lubridate")
library("data.table")
library("BBmisc")
library("dplyr")
library(class)
library(e1071)
library(stringr)

#################
# APPRENTISSAGE #
#################

# Lecture des fichiers en entrée :
train<-fread('PROJET_SPE/train.csv',header=TRUE)


# Modification des données et libération mémoire :
train_is_booking<-train[is_booking==1]
rm(train)
gc()
train_is_booking<-train_is_booking %>% BBmisc::dropNamed("is_booking")
train_is_booking<-train_is_booking %>% BBmisc::dropNamed("cnt")
train_hotel_cluster<-train_is_booking$hotel_cluster
train_is_booking<-train_is_booking %>% BBmisc::dropNamed("hotel_cluster")

# RQ :
#
# which(is.na(train_is_booking$srch_co))
# > integer(0)
# which(is.na(train_is_booking$srch_co))
# > integer(0)
#
# Donc on peut calculer la durée prévue du voyage à tous les coups !


# On rajoute la durée du voyage :
train_is_booking$trip_duration<-as.numeric(as.Date(train_is_booking$srch_co)-as.Date(train_is_booking$srch_ci))


# On retire l'année et l'heure précise, on ne garde que les MM/JJ :
train_is_booking$date_time<-str_sub(train_is_booking$date_time, 6, 10)
train_is_booking$srch_ci<-str_sub(train_is_booking$srch_ci, 6, 10)
train_is_booking$srch_co<-str_sub(train_is_booking$srch_co, 6, 10)


# Création du modèle :
classifier<-naiveBayes(train_is_booking,train_hotel_cluster)


#Libération intermédiaire de mémoire :
rm(train_is_booking)
rm(train_hotel_cluster)
gc()

###############
# APPLICATION #
###############

# Préparation du csv de sortie :
test<-fread('PROJET_SPE/test.csv',header=TRUE)
submission <- data.frame(id=test$id, hotel_cluster=NA)
test<-test %>% BBmisc::dropNamed("id")

# Pré-traitement :
test$date_time<-str_sub(test$date_time, 6, 10)
test$trip_duration<-as.numeric(as.Date(test$srch_co)-as.Date(test$srch_ci))
test$srch_ci<-str_sub(test$srch_ci, 6, 10)
test$srch_co<-str_sub(test$srch_co, 6, 10)

# Application du modèle :
# submission$hotel_cluster<-predict(classifier, test)

# rm(test)

