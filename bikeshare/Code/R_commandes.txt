# AFFICHAGE :
# par(mfrow = c(1,2))
# plot(train$hour,train$count, col=color)
# plot(submission$hour,submission$count, col=color)



###########################################################################
###			1er essai (en fonction du jour)			###
###########################################################################

library(MASS)
library(lubridate)
 
train <- read.csv("./sources/train.csv")
train$date<-wday(ymd_hms(train$datetime), label=TRUE)
train$date<-as.integer(train$date)
train$hour  <- hour(ymd_hms(train$datetime))

# supprimer la date pour avoir une matrice de corrélation et essayer de voir le lien entre les 
# différentes variables !
train<-train[,-c(1)]
cor(train)

# On va essayer de faire une regression linéaire :
train<-train[,-c(9)]
train<-train[,-c(9)]
mylm<-lm(count~.,data=train)
stepAIC(mylm)

#Coefficients:
#(Intercept)       season      weather         temp        atemp     humidity  
#   125.3005      22.6820       5.8493       1.6584       5.8229      -3.0411  
#  windspeed         date  
#     0.7966       1.9603

test <- read.csv("./sources/test.csv")
test$hour  <- hour(ymd_hms(test$datetime))
test$day <- wday(ymd_hms(test$datetime), label=TRUE)
test$day<-as.integer(test$day)

# On pré-remplit le résultat final !
submission <- data.frame(datetime=test$datetime, count=NA)

for (i in 1:nrow(test)){
	submission[i,2] = max(125.3005+test$season[i]*22.6820+test$weather[i]*5.8493+test$temp[i]*1.6584+test$atemp[i]*5.8229+test$humidity[i]*-3.0411+test$windspeed[i]*0.7966+test$day[i]*1.9603,0)
}

submission$hour  <- hour(ymd_hms(submission$datetime))
submission$day <- wday(ymd_hms(submission$datetime), label=TRUE)
submission$day <- as.integer(submission$day)

par(mfrow = c(1,2))
plot(train$hour,train$count, col="black")
plot(submission$hour,submission$count, col="black")

write.csv(submission, file = "./Résultats/linear_model.csv", row.names=FALSE)

###########################################################################
###		2e essai (en fonction de l'heure) : 2 modèles		###
###########################################################################

library(MASS)
library(lubridate) 

train <- read.csv("./sources/train.csv")
train$hour  <- hour(ymd_hms(train$datetime))
train$day <- wday(ymd_hms(train$datetime), label=TRUE)
train$day<-as.integer(train$day)
train<-train[,-c(1)]
train<-train[,-c(9)]
train<-train[,-c(9)]
weekend_train<-subset(train,day==6 | day==7)
semaine_train<-subset(train,day<6)

# On fait un modèle pour la semaine :

mylm_semaine<-lm(count~.,data=semaine_train)
stepAIC(mylm_semaine)
#Coefficients:
#(Intercept)       season      weather         temp        atemp     humidity  
#     5.8248      22.0184      -7.3750      -5.5177      11.1996      -1.9762  
#  windspeed         hour          day  
#     0.7709       7.8518       2.1974  


mylm_we<-lm(count~.,data=weekend_train)
stepAIC(mylm_we)
#Coefficients:
#(Intercept)       season      holiday      weather         temp        atemp  
#     64.358       20.180      -50.868        9.958        5.918        2.024  
#   humidity         hour  
#     -2.853        6.788  


test <- read.csv("./sources/test.csv")
test$hour  <- hour(ymd_hms(test$datetime))
test$day <- wday(ymd_hms(test$datetime), label=TRUE)
test$day<-as.integer(test$day)

# On pré-remplit le résultat final !
submission <- data.frame(datetime=test$datetime, count=NA)
submission_we <- data.frame(datetime=NA,count=NA)
submission_sem <- data.frame(datetime=NA,count=NA)

# On remplit en regardant si on est en semaine ou pas :
k<-1
m<-1
for (i in 1:nrow(test)){
	if (test[i,11]<6) {
		submission[i,2] = max((5.8248+22.0184*test[i,2]-7.3750*test[i,5]-5.5177*test[i,6]+11.1996*test[i,7]-1.9762*test[i,8]+0.7709*test[i,9]+7.8518*test[i,10]+2.1974*test[i,11]),0)
		submission_sem[k,1] = as.character(submission[i,1])
		submission_sem[k,2] = submission[i,2]
		k<-k+1
	} else {
		submission[i,2] = max((64.358+20.18*test[i,2]-50.868*test[i,3]+9.958*test[i,5]+5.918*test[i,6]+2.024*test[i,7]-2.853*test[i,8]+6.788*test[i,10]),0)
		submission_we[m,1] = as.character(submission[i,1])
		submission_we[m,2] = submission[i,2]
		m<-m+1
	}
}

head(submission_sem)
head(submission_we)

# RQ IMPORTANT : on a considéré les variables comme continues alors qu'elles ne le sont
# pas ; on va désormais utiliser des factor.

submission$hour  <- hour(ymd_hms(submission$datetime))
submission$day <- wday(ymd_hms(submission$datetime), label=TRUE)
submission$day<-as.integer(submission$day)

submission_we$hour  <- hour(ymd_hms(submission_we$datetime))
submission_sem$hour  <- hour(ymd_hms(submission_sem$datetime))

#################
###   GRAPH   ###
#################
color  <- rep(c("black","red"), c(120,48))

par(mfrow = c(1,2))
plot(semaine_train$hour,semaine_train$count, col="black")
plot(submission_sem$hour,submission_sem$count, col="black")

par(mfrow = c(1,2))
plot(weekend_train$hour,weekend_train$count, col="black")
plot(submission_we$hour,submission_we$count, col="black")

#plot(submission$hour,submission$count, col=color)

##################

write.csv(submission, file = "./Résultats/linear_double_model.csv", row.names=FALSE)


###########################################################################
###			 3e essai : idem avec des factor     		###
###########################################################################
library(MASS)
library(lubridate) 

train <- read.csv("./sources/train.csv")

train$hour  <- hour(ymd_hms(train$datetime))
train$day <- wday(ymd_hms(train$datetime), label=TRUE)
train$day<-as.integer(train$day)

train<-train[,-c(1)]
train<-train[,-c(9)]
train<-train[,-c(9)]

train$season<-as.factor(train$season)
train$holiday<-as.factor(train$holiday)
train$workingday<-as.factor(train$workingday)
train$weather<-as.factor(train$weather)
train$hour<-as.factor(train$hour)
train$day<-as.factor(train$day)
#train$count<-as.factor(train$count)

weekend_train<-subset(train,day==6|day==7)
semaine_train<-subset(train,day==1|day==2|day==3|day==4|day==5)


mylm_semaine<-lm(count~.,data=semaine_train)
step_sem_front<-stepAIC(mylm_semaine,direction = "forward", trace=FALSE)
#step_sem_back<-stepAIC(mylm_semaine,direction = "backward", trace=FALSE)
#step_sem_both<-stepAIC(mylm_semaine,direction = "both", trace=FALSE)
#htmlTable(anova(step_sem_front,step_sem_back,step_sem_both))

#Coefficients SEMAINE:
#(Intercept)      season2      season3      season4     weather2     weather3  
#   -50.0786      36.6715      25.1435      65.4588      -7.5642     -66.2426  
#   weather4        atemp     humidity    windspeed        hour1        hour2  
#  -162.7082       5.6239      -0.8513      -0.3689     -14.2564     -23.7641  
#      hour3        hour4        hour5        hour6        hour7        hour8  
#   -31.4254     -29.8396     -12.7936      53.2585     204.1481     350.2259  
#      hour9       hour10       hour11       hour12       hour13       hour14  
#   170.3309     100.8405     120.1680     157.8629     149.1133     130.1037  
#     hour15       hour16       hour17       hour18       hour19       hour20  
#   141.0937     216.4165     407.9490     384.3493     261.1313     175.9108  
#     hour21       hour22       hour23         day2         day3         day4  
#   118.6451      74.7748      29.7653       3.9519       7.3319      11.4758  
#       day5  
#    13.1366

mylm_we<-lm(count~.,data=weekend_train)
stepAIC(mylm_we)

#Coefficients WE:
#(Intercept)      season2      season3      season4     holiday1     weather2  
#      3.280       37.554        5.952       64.561      -56.696       -2.438  
#   weather3         temp     humidity    windspeed        hour1        hour2  
#    -52.653        7.609       -1.180       -1.484      -20.878      -33.024  
#      hour3        hour4        hour5        hour6        hour7        hour8  
#    -48.523      -52.569      -39.744        3.264       94.678      228.199  
#      hour9       hour10       hour11       hour12       hour13       hour14  
#    151.200      126.615      164.506      206.085      208.754      193.470  
#     hour15       hour16       hour17       hour18       hour19       hour20  
#    202.987      235.425      310.524      255.343      177.771      107.417  
#     hour21       hour22       hour23  
#     75.212       64.078       41.828  

test <- read.csv("./sources/test.csv")
test$hour  <- hour(ymd_hms(test$datetime))
test$day <- wday(ymd_hms(test$datetime), label=TRUE)
test$day <- as.integer(test$day)

# On pré-remplit le résultat final !
submission <- data.frame(datetime=test$datetime, count=NA)
submission_we <- data.frame(datetime=NA,count=NA)
submission_sem <- data.frame(datetime=NA,count=NA)

# On remplit avec une boucle :
m<-1
k<-1
for (i in 1:nrow(test)){
	if (test$day[i]!=6 & test$day[i]!=7) {
		submission[i,2] = max(0,-50.0786
					+as.integer(test$season[i]==2)*36.6715
					+as.integer(test$season[i]==3)*25.1435
					+as.integer(test$season[i]==4)*65.4588
					+as.integer(test$weather[i]==2)*-7.5642
					+as.integer(test$weather[i]==3)*-66.2426
					+as.integer(test$weather[i]==4)*-162.7082
					+test$atemp[i]*5.6239
					+test$humidity[i]*-0.8513
					+test$windspeed[i]*-0.3689
					+as.integer(test$hour[i]==1)*-14.2564
					+as.integer(test$hour[i]==2)*-23.7641
					+as.integer(test$hour[i]==3)*-31.4254
					+as.integer(test$hour[i]==4)*-29.8396
					+as.integer(test$hour[i]==5)*-12.7936
					+as.integer(test$hour[i]==6)*53.2585
					+as.integer(test$hour[i]==7)*204.1481
					+as.integer(test$hour[i]==8)*350.2259
					+as.integer(test$hour[i]==9)*170.3309
					+as.integer(test$hour[i]==10)*100.8405
					+as.integer(test$hour[i]==11)*120.1680
					+as.integer(test$hour[i]==12)*157.8629
					+as.integer(test$hour[i]==13)*149.1133
					+as.integer(test$hour[i]==14)*130.1037
					+as.integer(test$hour[i]==15)*141.0937
					+as.integer(test$hour[i]==16)*216.4165
					+as.integer(test$hour[i]==17)*407.9490
					+as.integer(test$hour[i]==18)*384.3493
					+as.integer(test$hour[i]==19)*261.1313
					+as.integer(test$hour[i]==20)*175.9108
					+as.integer(test$hour[i]==21)*118.6451
					+as.integer(test$hour[i]==22)*74.7748
					+as.integer(test$hour[i]==23)*29.7653
					+as.integer(test$day[i]==2)*3.9519
					+as.integer(test$day[i]==3)*7.3319
					+as.integer(test$day[i]==4)*11.4758
					+as.integer(test$day[i]==5)*13.1366)
		submission_sem[k,1] = as.character(submission[i,1])
		submission_sem[k,2] = submission[i,2]
		k<-k+1
	} else {
		submission[i,2] = max(0,3.280
					+as.integer(test$season[i]==2)*37.554
					+as.integer(test$season[i]==3)*5.952
					+as.integer(test$season[i]==4)*64.561
					+as.integer(test$holiday[i]==1)*-56.696
					+as.integer(test$weather[i]==2)*-2.438
					+as.integer(test$weather[i]==3)*-53.653
					+test$temp[i]*7.609
					+test$humidity[i]*-1.180
					+test$windspeed[i]*-1.484
					+as.integer(test$hour[i]==1)*-20.878
					+as.integer(test$hour[i]==2)*-33.024
					+as.integer(test$hour[i]==3)*-48.523
					+as.integer(test$hour[i]==4)*-52.569
					+as.integer(test$hour[i]==5)*-39.744
					+as.integer(test$hour[i]==6)*3.264
					+as.integer(test$hour[i]==7)*94.678
					+as.integer(test$hour[i]==8)*228.199
					+as.integer(test$hour[i]==9)*151.200
					+as.integer(test$hour[i]==10)*126.615
					+as.integer(test$hour[i]==11)*164.506
					+as.integer(test$hour[i]==12)*206.085
					+as.integer(test$hour[i]==13)*208.754
					+as.integer(test$hour[i]==14)*193.470
					+as.integer(test$hour[i]==15)*202.987
					+as.integer(test$hour[i]==16)*235.425
					+as.integer(test$hour[i]==17)*310.524
					+as.integer(test$hour[i]==18)*255.343
					+as.integer(test$hour[i]==19)*177.771
					+as.integer(test$hour[i]==20)*107.417
					+as.integer(test$hour[i]==21)*75.212
					+as.integer(test$hour[i]==22)*64.078
					+as.integer(test$hour[i]==23)*41.828)
		submission_we[m,1] = as.character(submission[i,1])
		submission_we[m,2] = submission[i,2]
		m<-m+1
	}
}

submission$hour  <- hour(ymd_hms(submission$datetime))
#submission$day <- wday(ymd_hms(submission$datetime), label=TRUE)
#submission$day<-as.integer(submission$day)

submission_we$hour  <- hour(ymd_hms(submission_we$datetime))
submission_sem$hour  <- hour(ymd_hms(submission_sem$datetime))

#################
###   GRAPH   ###
#################
color  <- rep(c("black","red"), c(120,48))

par(mfrow = c(1,2))
plot(semaine_train$hour,semaine_train$count, col="black")
plot(submission_sem$hour,submission_sem$count, col="black")

par(mfrow = c(1,2))
plot(weekend_train$hour,weekend_train$count, col="black")
plot(submission_we$hour,submission_we$count, col="black")
write.csv(submission, file = "./Résultats/linear_factor_model.csv", row.names=FALSE)


##########################################################################>
# La même en découpant en table :
##########################################################################>

library(MASS)
library(lubridate) 

train <- read.csv("./sources/train.csv")

train$hour  <- hour(ymd_hms(train$datetime))
train$day <- wday(ymd_hms(train$datetime), label=TRUE)
train$day<-as.integer(train$day)

train<-train[,-c(1)]
train<-train[,-c(9)]
train<-train[,-c(9)]

train$season<-as.factor(train$season)
train$holiday<-as.factor(train$holiday)
train$workingday<-as.factor(train$workingday)
train$weather<-as.factor(train$weather)
train$hour<-as.factor(train$hour)
train$day<-as.factor(train$day)
#train$count<-as.factor(train$count)

weekend_train<-subset(train,day==6|day==7)
semaine_train<-subset(train,day==1|day==2|day==3|day==4|day==5)

weekend_test<-subset(test,day==6|day==7)
semaine_test<-subset(test,day==1|day==2|day==3|day==4|day==5)
#<------------------------------------------------
## GENERAL
mylm_s<-glm(count~.,family="poisson",data=train)
step_s_front<-stepAIC(mylm_s,direction = "forward", trace=FALSE)
step_s_back<-stepAIC(mylm_s,direction = "backward", trace=FALSE)
step_s_both<-stepAIC(mylm_s,direction = "both", trace=FALSE)
anova(step_s_front,step_s_back,step_s_both)
# front donne le min
mdl_s<-step_s_front
#------------------------------------------------>


mylm_semaine<-glm(count~.,family="poisson",data=semaine_train)
step_sem_front<-stepAIC(mylm_semaine,direction = "forward", trace=FALSE)
#step_sem_back<-stepAIC(mylm_semaine,direction = "backward", trace=FALSE)
#step_sem_both<-stepAIC(mylm_semaine,direction = "both", trace=FALSE)
#anova(step_sem_front,step_sem_back,step_sem_both)
# front donne le min
mdl_sem<-step_sem_front


mylm_we<-glm(count~.,family="poisson",data=weekend_train)
step_we_front<-stepAIC(mylm_we,direction = "forward", trace=FALSE)
#step_we_back<-stepAIC(mylm_we,direction = "backward", trace=FALSE)
#step_we_both<-stepAIC(mylm_we,direction = "both", trace=FALSE)
#anova(step_we_front,step_we_back,step_we_both)
# front donne le min
mdl_we<-step_we_front


test <- read.csv("./sources/test.csv")
test$hour  <- hour(ymd_hms(test$datetime))
test$day <- wday(ymd_hms(test$datetime), label=TRUE)
test$day <- as.integer(test$day)

test$season<-as.factor(test$season)
test$holiday<-as.factor(test$holiday)
test$workingday<-as.factor(test$workingday)
test$weather<-as.factor(test$weather)
test$hour<-as.factor(test$hour)
test$day<-as.factor(test$day)

# On pré-remplit le résultat final !
submission <- data.frame(datetime=test$datetime, count=NA)
submission_we <- data.frame(datetime=NA,count=NA)
submission_sem <- data.frame(datetime=NA,count=NA)

# On remplit avec predict()
for (i in 1:nrow(test)){
	if (test$day[i]==6 | test$day[i]==7) {
		submission[i,2]<-max(0,predict(mdl_we,test[i,],type="response"))
	} else {
		submission[i,2]<-max(0,predict(mdl_sem,test[i,],type="response"))
	}
}

for (i in 1:nrow(test)){
	submission_s[i,2]<-max(0,predict(mdl_s,test[i,],type="response"))
}



write.csv(submission, file = "./Résultats/linear_factor_model.csv", row.names=FALSE)
write.csv(submission_s, file = "./Résultats/modele_unique_poisson_factorise_model.csv", row.names=FALSE)


###########################################################################
###		    4e essai : en découpant la journée     		###
###		CCl : Erreur d'apprentissage importante  		###
###########################################################################


library(MASS)
library(lubridate) 

train <- read.csv("./sources/train.csv")
train$hour  <- hour(ymd_hms(train$datetime))
train$day <- wday(ymd_hms(train$datetime), label=TRUE)
train$day<-as.integer(train$day)
train<-train[,-c(1)]
train<-train[,-c(9)]
train<-train[,-c(9)]
train$season<-as.factor(train$season)
train$holiday<-as.factor(train$holiday)
train$workingday<-as.factor(train$workingday)
train$weather<-as.factor(train$weather)
train$day<-as.factor(train$day)

weekend_train_nuit<-subset(train,(day==6|day==7)&(hour>20|hour<=6))
weekend_train_matin<-subset(train,(day==6|day==7)&(hour>6&hour<=13))
weekend_train_soir<-subset(train,(day==6|day==7)&(hour>13&hour<=20))

semaine_train_nuit<-subset(train,(day==1|day==2|day==3|day==4|day==5)&(hour>20|hour<=6))
semaine_train_matin<-subset(train,(day==1|day==2|day==3|day==4|day==5)&(hour>6&hour<=13))
semaine_train_soir<-subset(train,(day==1|day==2|day==3|day==4|day==5)&(hour>13&hour<=20))

###########
# SEMAINE
###########

mylm_semaine_nuit<-lm(count~.,data=semaine_train_nuit)
stepAIC(mylm_semaine_nuit)
#Coefficients:
#(Intercept)      season2      season3      season4     holiday1     weather2  
#   -13.8409       6.0953       6.3105      19.1657       8.7921      -3.3397  
#   weather3        atemp     humidity         hour         day2         day3  
#   -19.0152       2.7784      -0.4623       4.5188      -7.4481      -3.1083  
#       day4         day5  
#     2.3750       4.4461 

mylm_semaine_matin<-lm(count~.,data=semaine_train_matin)
stepAIC(mylm_semaine_matin)
#Coefficients:
#(Intercept)      season2      season3      season4     weather2     weather3  
#    250.943       59.419       52.674       88.921      -15.114     -125.344  
#       temp        atemp         hour         day2         day3         day4  
#     -9.145       12.445      -17.116        3.313       10.157       20.335  
#       day5  
#     23.143 

mylm_semaine_soir<-lm(count~.,data=semaine_train_soir)
stepAIC(mylm_semaine_soir)
#Coefficients:
#(Intercept)      season2      season3      season4     weather2     weather3  
#   -285.796       60.505       46.348      112.515       -6.552      -66.431  
#   weather4        atemp     humidity         hour  
#     69.252        9.940       -1.729       23.127  

###########
# W-E
###########

mylm_we_nuit<-lm(count~.,data=weekend_train_nuit)
stepAIC(mylm_we_nuit)
#Coefficients:
#(Intercept)      season2      season3      season4     holiday1  workingday1  
#   -0.09419      9.45253     -0.94323     21.40716    -26.30732     -4.95703  
#   weather2     weather3         temp     humidity    windspeed         hour  
#   -3.75726    -11.73601      3.99479     -0.57854     -0.97302      4.79994  

mylm_we_matin<-lm(count~.,data=weekend_train_matin)
stepAIC(mylm_we_matin)
#Coefficients:
#(Intercept)      season2      season3      season4     holiday1     weather2  
#    36.0131      37.7298      -7.0378      76.2489     -67.6562     -12.2489  
#   weather3         temp     humidity    windspeed         hour  
#   -99.3812       8.1844      -0.8987      -1.9680      11.9391  

mylm_we_soir<-lm(count~.,data=weekend_train_soir)
stepAIC(mylm_we_soir)
#Coefficients:
#(Intercept)      season2      season3      season4     holiday1     weather2  
#    225.476       80.134       43.465      124.535      -96.134        3.905  
#   weather3         temp     humidity         hour  
#    -42.401       10.952       -2.018       -5.963  


###########
## SIMU  ##
###########

test <- read.csv("./sources/test.csv")
test$hour  <- hour(ymd_hms(test$datetime))
test$day <- wday(ymd_hms(test$datetime), label=TRUE)
test$day <- as.integer(test$day)

# On pré-remplit le résultat final !
submission <- data.frame(datetime=test$datetime, count=NA)

# On remplit avec une boucle :
for (i in 1:nrow(test)){
	if (test$day[i]!=6 & test$day[i]!=7) {
		if (test$hour[i]<=6 | test$hour[i]>20){
			submission[i,2] = max(0,-13.8409
						+as.integer(test$season[i]==2)*6.0953
						+as.integer(test$season[i]==3)*6.3105
						+as.integer(test$season[i]==4)*19.1657
						+as.integer(test$holiday[i]==1)*8.7921
						+as.integer(test$weather[i]==2)*-3.3397
						+as.integer(test$weather[i]==3)*-19.0152
						+test$atemp[i]*2.7784
						+test$humidity[i]*-0.4623
						+test$hour[i]*4.5188
						+as.integer(test$day[i]==2)*-7.4481
						+as.integer(test$day[i]==3)*-3.1083
						+as.integer(test$day[i]==4)*2.3750
						+as.integer(test$day[i]==5)*4.4461)
		} else if(test$hour[i]>6 & test$hour[i]<=13){
			submission[i,2] = max(0,250.943
						+as.integer(test$season[i]==2)*59.419
						+as.integer(test$season[i]==3)*52.674
						+as.integer(test$season[i]==4)*88.921
						+as.integer(test$weather[i]==2)*-15.114
						+as.integer(test$weather[i]==3)*-125.344
						+test$temp[i]*-9.145
						+test$atemp[i]*12.445
						+test$hour[i]*-17.116
						+as.integer(test$day[i]==2)*3.313
						+as.integer(test$day[i]==3)*10.157
						+as.integer(test$day[i]==4)*20.335
						+as.integer(test$day[i]==5)*23.143)
		} else {
			submission[i,2] = max(0,-285.796
						+as.integer(test$season[i]==2)*60.505
						+as.integer(test$season[i]==3)*46.348
						+as.integer(test$season[i]==4)*112.515
						+as.integer(test$weather[i]==2)*-6.552
						+as.integer(test$weather[i]==3)*-66.431
						+as.integer(test$weather[i]==4)*69.252
						+test$atemp[i]*9.940
						+test$humidity[i]*-1.729
						+test$hour[i]*23.127)
		}
	} else {
		if (test$hour[i]<=6 | test$hour[i]>20){
			submission[i,2] = max(0,-0.09419
						+as.integer(test$season[i]==2)*9.45253
						+as.integer(test$season[i]==3)*-0.94323
						+as.integer(test$season[i]==4)*21.40716
						+as.integer(test$holiday[i]==1)*-26.30732
						+as.integer(test$workingday[i]==1)*-4.95703
						+as.integer(test$weather[i]==2)*-3.75726
						+as.integer(test$weather[i]==3)*-11.73601
						+test$temp[i]*33.99479
						+test$humidity[i]*-0.57854
						+test$windspeed[i]*-0.97302
						+test$hour[i]*4.79994)
		} else if(test$hour[i]>6 & test$hour[i]<=13){
			submission[i,2] = max(0,36.0131
						+as.integer(test$season[i]==2)*37.7298
						+as.integer(test$season[i]==3)*-7.0378
						+as.integer(test$season[i]==4)*76.2489
						+as.integer(test$holiday[i]==1)*-67.6562
						+as.integer(test$weather[i]==2)*-12.2489
						+as.integer(test$weather[i]==3)*-99.3812
						+test$temp[i]*8.1844
						+test$humidity[i]*-0.8987
						+test$windspeed[i]*-1.9680
						+test$hour[i]*11.9391)
		} else {
			submission[i,2] = max(0,225.476
						+as.integer(test$season[i]==2)*80.134
						+as.integer(test$season[i]==3)*43.465
						+as.integer(test$season[i]==4)*124.535
						+as.integer(test$holiday[i]==1)*-96.134
						+as.integer(test$weather[i]==2)*3.905
						+as.integer(test$weather[i]==3)*-42.401
						+test$temp[i]*10.952
						+test$humidity[i]*-2.018
						+test$hour[i]*-5.963)
		}
	}
}

submission$hour  <- hour(ymd_hms(submission$datetime))
submission$day <- wday(ymd_hms(submission$datetime), label=TRUE)
submission$day <- as.integer(submission$day)

write.csv(submission, file = "./Résultats/linear_corrected_decoupagejournee_factor_model.csv", row.names=FALSE)



########################################################################################
###			    	     RANDOM FOREST 		  		     ###
########################################################################################

library(ggplot2)
library(lubridate)
library(randomForest)

set.seed(1)

train <- read.csv("./sources/train.csv")
test <- read.csv("./sources/test.csv")

library(randomForest)

extractFeatures <- function(data) {
  features <- c("season",
                "holiday",
                "workingday",
                "weather",
                "temp",
                "atemp",
                "humidity",
                "windspeed",
                "hour")
  data$hour <- hour(ymd_hms(data$datetime))
  return(data[,features])
}

trainFea <- extractFeatures(train)
testFea  <- extractFeatures(test)

submission <- data.frame(datetime=test$datetime, count=NA)

# We only use past data to make predictions on the test set, 
# so we train a new model for each test set cutoff point
for (i_year in unique(year(ymd_hms(test$datetime)))) {
  for (i_month in unique(month(ymd_hms(test$datetime)))) {
    cat("Year: ", i_year, "\tMonth: ", i_month, "\n")
    testLocs   <- year(ymd_hms(test$datetime))==i_year & month(ymd_hms(test$datetime))==i_month
    testSubset <- test[testLocs,]
    trainLocs  <- ymd_hms(train$datetime) <= min(ymd_hms(testSubset$datetime))
    rf <- randomForest(extractFeatures(train[trainLocs,]), train[trainLocs,"count"], ntree=100)
    submission[testLocs, "count"] <- predict(rf, extractFeatures(testSubset))
  }
}

write.csv(submission, file = "./Résultats/1_random_forest_submission.csv", row.names=FALSE)

# Train a model across all the training data and plot the variable importance
rf <- randomForest(extractFeatures(train), train$count, ntree=100, importance=TRUE)
imp <- importance(rf, type=1)
featureImportance <- data.frame(Feature=row.names(imp), Importance=imp[,1])

p <- ggplot(featureImportance, aes(x=reorder(Feature, Importance), y=Importance)) +
     geom_bar(stat="identity", fill="#53cfff") +
     coord_flip() + 
     theme_light(base_size=20) +
     xlab("Importance") +
     ylab("") + 
     ggtitle("Random Forest Feature Importance\n") +
     theme(plot.title=element_text(size=18))

ggsave("./Résultats/Avec_Graphiques/2_feature_importance.png", p)

submission$hour  <- hour(ymd_hms(submission$datetime))
submission$day <- wday(ymd_hms(submission$datetime), label=TRUE)
submission$day <- as.integer(submission$day)
train$hour  <- hour(ymd_hms(train$datetime))
train$day <- wday(ymd_hms(train$datetime), label=TRUE)
train$day <- as.integer(train$day)

par(mfrow = c(1,2))
plot(train$hour,train$count, col="black")
plot(submission$hour,submission$count, col="black")


########################################################################################
###		 	          Régression généralisée			     ###
########################################################################################

library(MASS)
library(lubridate) 

train <- read.csv("./sources/train.csv")
train$hour  <- hour(ymd_hms(train$datetime))
train$day <- wday(ymd_hms(train$datetime), label=TRUE)
train$day<-as.integer(train$day)
train<-train[,-c(1)]
train<-train[,-c(9)]
train<-train[,-c(9)]
train$season<-as.factor(train$season)
train$holiday<-as.factor(train$holiday)
train$workingday<-as.factor(train$workingday)
train$weather<-as.factor(train$weather)
train$hour<-as.factor(train$hour)
train$day<-as.factor(train$day)
weekend_train<-subset(train,day==6|day==7)
semaine_train<-subset(train,day==1|day==2|day==3|day==4|day==5)


mylm_semaine<-glm(count~.,family=poisson,data=semaine_train)
stepAIC(mylm_semaine)

#Coefficients SEMAINE:
#(Intercept)      season2      season3      season4     holiday1     weather2  
#   3.130707     0.306955     0.261947     0.458529     0.031317    -0.029764  
#   weather3     weather4         temp        atemp     humidity    windspeed  
#  -0.446305    -0.280125    -0.027459     0.052148    -0.003349    -0.001507  
#      hour1        hour2        hour3        hour4        hour5        hour6  
#  -0.480038    -0.868608    -1.476324    -1.963302    -0.720236     0.671073  
#      hour7        hour8        hour9       hour10       hour11       hour12  
#   1.690574     2.148028     1.530881     1.168629     1.290751     1.473194  
#     hour13       hour14       hour15       hour16       hour17       hour18  
#   1.438200     1.352814     1.406096     1.695269     2.203607     2.164263  
#     hour19       hour20       hour21       hour22       hour23         day2  
#   1.852338     1.558092     1.278076     0.979048     0.505867     0.014545  
#       day3         day4         day5  
#   0.035558     0.059364     0.077021 

mylm_we<-glm(count~.,family=poisson,data=weekend_train)
stepAIC(mylm_we)

#Coefficients WE:
#(Intercept)      season2      season3      season4     holiday1     weather2  
#   3.720409     0.307315     0.179893     0.440373    -0.343101    -0.046036  
#   weather3         temp        atemp     humidity    windspeed        hour1  
#  -0.419899     0.026352     0.006714    -0.003647    -0.003207    -0.433234  
#      hour2        hour3        hour4        hour5        hour6        hour7  
#  -0.825576    -1.579685    -2.343833    -1.489425    -0.213172     0.761262  
#      hour8        hour9       hour10       hour11       hour12       hour13  
#   1.379637     1.071734     0.968406     1.133156     1.267780     1.266597  
#     hour14       hour15       hour16       hour17       hour18       hour19  
#   1.219325     1.247909     1.348306     1.559823     1.423719     1.193381  
#     hour20       hour21       hour22       hour23  
#   0.899586     0.716428     0.630703     0.449692 

test <- read.csv("./sources/test.csv")
test$hour  <- hour(ymd_hms(test$datetime))
test$day <- wday(ymd_hms(test$datetime), label=TRUE)
test$day <- as.integer(test$day)

# On pré-remplit le résultat final !
submission <- data.frame(datetime=test$datetime, count=NA)
submission_sem <- data.frame(datetime=NA, count=NA)
submission_we <- data.frame(datetime=NA, count=NA)

# On remplit avec une boucle :
k<-1
m<-1
for (i in 1:nrow(test)){
	if (test$day[i]!=6 & test$day[i]!=7) {
		submission[i,2] = max(0,exp(3.130707
					+as.integer(test$season[i]==2)*0.306955
					+as.integer(test$season[i]==3)*0.261947
					+as.integer(test$season[i]==4)*0.458529
					+as.integer(test$holiday[i]==1)*0.031317
					+as.integer(test$weather[i]==2)*-0.029764
					+as.integer(test$weather[i]==3)*-0.446305
					+as.integer(test$weather[i]==4)*-0.380125
					+test$temp[i]*-0.027459
					+test$atemp[i]*0.052148
					+test$humidity[i]*-0.003349
					+test$windspeed[i]*-0.001507
					+as.integer(test$hour[i]==1)*-0.480038
					+as.integer(test$hour[i]==2)*-0.868608
					+as.integer(test$hour[i]==3)*-1.476324
					+as.integer(test$hour[i]==4)*-1.963302
					+as.integer(test$hour[i]==5)*-0.720236
					+as.integer(test$hour[i]==6)*0.671073
					+as.integer(test$hour[i]==7)*1.690574
					+as.integer(test$hour[i]==8)*2.148028
					+as.integer(test$hour[i]==9)*1.530881
					+as.integer(test$hour[i]==10)*1.168629
					+as.integer(test$hour[i]==11)*1.290751
					+as.integer(test$hour[i]==12)*1.473194
					+as.integer(test$hour[i]==13)*1.438200
					+as.integer(test$hour[i]==14)*1.352814
					+as.integer(test$hour[i]==15)*1.406096
					+as.integer(test$hour[i]==16)*1.695269
					+as.integer(test$hour[i]==17)*2.203607
					+as.integer(test$hour[i]==18)*2.164263
					+as.integer(test$hour[i]==19)*1.852338
					+as.integer(test$hour[i]==20)*1.558092
					+as.integer(test$hour[i]==21)*1.278076
					+as.integer(test$hour[i]==22)*0.979048
					+as.integer(test$hour[i]==23)*0.505867
					+as.integer(test$day[i]==2)*0.014545
					+as.integer(test$day[i]==3)*0.035558
					+as.integer(test$day[i]==4)*0.059364
					+as.integer(test$day[i]==5)*0.077021))
		submission_sem[k,1] = as.character(submission[i,1])
		submission_sem[k,2] = submission[i,2]
		k<-k+1
					
	} else {
		submission[i,2] = max(0,exp(3.720409
					+as.integer(test$season[i]==2)*0.307315
					+as.integer(test$season[i]==3)*0.179893
					+as.integer(test$season[i]==4)*0.440373
					+as.integer(test$holiday[i]==1)*-0.343101
					+as.integer(test$weather[i]==2)*-0.046036
					+as.integer(test$weather[i]==3)*-0.419899
					+test$temp[i]*0.026352
					+test$atemp[i]*0.006714
					+test$humidity[i]*-0.003647
					+test$windspeed[i]*-0.003207
					+as.integer(test$hour[i]==1)*-0.433234
					+as.integer(test$hour[i]==2)*-0.825576
					+as.integer(test$hour[i]==3)*-1.579685
					+as.integer(test$hour[i]==4)*-2.343833
					+as.integer(test$hour[i]==5)*-1.489425
					+as.integer(test$hour[i]==6)*-0.213172
					+as.integer(test$hour[i]==7)*0.761262
					+as.integer(test$hour[i]==8)*1.379637
					+as.integer(test$hour[i]==9)*1.071734
					+as.integer(test$hour[i]==10)*0.968406
					+as.integer(test$hour[i]==11)*1.133156
					+as.integer(test$hour[i]==12)*1.267780
					+as.integer(test$hour[i]==13)*1.266597
					+as.integer(test$hour[i]==14)*1.219325
					+as.integer(test$hour[i]==15)*1.247909
					+as.integer(test$hour[i]==16)*1.348306
					+as.integer(test$hour[i]==17)*1.559823
					+as.integer(test$hour[i]==18)*1.423719
					+as.integer(test$hour[i]==19)*1.193381
					+as.integer(test$hour[i]==20)*0.899586
					+as.integer(test$hour[i]==21)*0.716428
					+as.integer(test$hour[i]==22)*0.630703
					+as.integer(test$hour[i]==23)*0.449692))		
		submission_we[m,1] = as.character(submission[i,1])
		submission_we[m,2] = submission[i,2]
		m<-m+1
	}
}

submission$hour  <- hour(ymd_hms(submission$datetime))
#submission$day <- wday(ymd_hms(submission$datetime), label=TRUE)
#submission$day<-as.integer(submission$day)

submission_we$hour  <- hour(ymd_hms(submission_we$datetime))
submission_sem$hour  <- hour(ymd_hms(submission_sem$datetime))

#################
###   GRAPH   ###
#################
color  <- rep(c("black","red"), c(120,48))

par(mfrow = c(1,2))
plot(semaine_train$hour,semaine_train$count, col="black")
plot(submission_sem$hour,submission_sem$count, col="black")

par(mfrow = c(1,2))
plot(weekend_train$hour,weekend_train$count, col="black")
plot(submission_we$hour,submission_we$count, col="black")



write.csv(submission, file = "./Résultats/linear_poisson_factor_model.csv", row.names=FALSE)

###########################################################################
###	          6e essai : en découpant en 3 la journée     		###
###			     (avec POISSON)   				###
###########################################################################


library(MASS)
library(lubridate) 

train <- read.csv("./sources/train.csv")
train$hour  <- hour(ymd_hms(train$datetime))
train$day <- wday(ymd_hms(train$datetime), label=TRUE)
train$day<-as.integer(train$day)
train<-train[,-c(1)]
train<-train[,-c(9)]
train<-train[,-c(9)]
train$season<-as.factor(train$season)
train$holiday<-as.factor(train$holiday)
train$workingday<-as.factor(train$workingday)
train$weather<-as.factor(train$weather)
train$day<-as.factor(train$day)

weekend_train_nuit<-subset(train,(day==6|day==7)&(hour>20|hour<=6))
weekend_train_matin<-subset(train,(day==6|day==7)&(hour>6&hour<=13))
weekend_train_soir<-subset(train,(day==6|day==7)&(hour>13&hour<=20))

semaine_train_nuit<-subset(train,(day==1|day==2|day==3|day==4|day==5)&(hour>20|hour<=6))
semaine_train_matin<-subset(train,(day==1|day==2|day==3|day==4|day==5)&(hour>6&hour<=13))
semaine_train_soir<-subset(train,(day==1|day==2|day==3|day==4|day==5)&(hour>13&hour<=20))

###########
# SEMAINE
###########

mylm_semaine_nuit<-glm(count~.,family=poisson,data=semaine_train_nuit)
stepAIC(mylm_semaine_nuit)
#Coefficients:
#(Intercept)      season2      season3      season4     holiday1     weather2  
#   2.541537     0.240970     0.220980     0.465778     0.123470    -0.038192  
#   weather3         temp        atemp     humidity    windspeed         hour  
#  -0.392610     0.018115     0.027431    -0.006219    -0.002648     0.066926  
#       day2         day3         day4         day5  
#  -0.135261    -0.059559     0.021609     0.066878

mylm_semaine_matin<-glm(count~.,family=poisson,data=semaine_train_matin)
stepAIC(mylm_semaine_matin)
#Coefficients:
#(Intercept)      season2      season3      season4     holiday1     weather2  
#   5.554851     0.329789     0.282519     0.464723     0.061016    -0.046497  
#   weather3         temp        atemp     humidity    windspeed         hour  
#  -0.598558    -0.043041     0.057368    -0.001385    -0.001519    -0.077788  
#       day2         day3         day4         day5  
#   0.005884     0.037604     0.080710     0.094545  

mylm_semaine_soir<-glm(count~.,family=poisson,data=semaine_train_soir)
stepAIC(mylm_semaine_soir)
#Coefficients:
#(Intercept)      season2      season3      season4     holiday1     weather2  
#  3.5880672    0.2796333    0.2225579    0.4743010   -0.0217482   -0.0213004  
#   weather3     weather4         temp        atemp     humidity    windspeed  
# -0.2749172    0.1966790   -0.0192585    0.0509824   -0.0060865   -0.0006525  
#       hour         day2         day3         day4         day5  
#  0.0757447    0.0575751    0.0667446    0.0598289    0.0592517

###########
# W-E
###########

mylm_we_nuit<-glm(count~.,family=poisson,data=weekend_train_nuit)
stepAIC(mylm_we_nuit)
#Coefficients:
#(Intercept)      season2      season3      season4     holiday1  workingday1  
#   2.753416     0.260261     0.123534     0.502101    -0.424731    -0.076721  
#   weather2     weather3         temp        atemp     humidity    windspeed  
#  -0.070580    -0.358851     0.070847    -0.012228    -0.006433    -0.010031  
#       hour  
#   0.062011 

mylm_we_matin<-glm(count~.,family=poisson,data=weekend_train_matin)
stepAIC(mylm_we_matin)
#Coefficients:
#(Intercept)      season2      season3      season4     holiday1  workingday1  
#   4.497087     0.237913     0.086880     0.390759    -0.279256     0.031551  
#   weather2     weather3         temp        atemp     humidity    windspeed  
#  -0.044564    -0.676798     0.021950     0.007736    -0.003002    -0.005392  
#       hour  
#   0.047104 


mylm_we_soir<-glm(count~.,family=poisson,data=weekend_train_soir)
stepAIC(mylm_we_soir)
#Coefficients:
#(Intercept)      season2      season3      season4     holiday1  workingday1  
#  5.2879291    0.3257528    0.2250004    0.4955032   -0.3452564   -0.0097681  
#   weather2     weather3         temp        atemp     humidity    windspeed  
#  0.0120785   -0.2094366    0.0238912    0.0101855   -0.0067173    0.0004933  
#       hour  
# -0.0162442


###########
## SIMU  ##
###########

test <- read.csv("./sources/test.csv")
test$hour  <- hour(ymd_hms(test$datetime))
test$day <- wday(ymd_hms(test$datetime), label=TRUE)
test$day <- as.integer(test$day)

# On pré-remplit le résultat final !
submission <- data.frame(datetime=test$datetime, count=NA)

# On remplit avec une boucle :
for (i in 1:nrow(test)){
	if (test$day[i]!=6 & test$day[i]!=7) {
		if (test$hour[i]<=6 | test$hour[i]>20){
			submission[i,2] = max(0,exp(2.541537
						+as.integer(test$season[i]==2)*0.240970
						+as.integer(test$season[i]==3)*0.220980
						+as.integer(test$season[i]==4)*0.465778
						+as.integer(test$holiday[i]==1)*0.123470
						+as.integer(test$weather[i]==2)*-0.038192
						+as.integer(test$weather[i]==3)*-0.392610
						+test$temp[i]*0.018115
						+test$atemp[i]*0.027431
						+test$humidity[i]*-0.006219
						+test$windspeed[i]*-0.002648
						+test$hour[i]*0.066926
						+as.integer(test$day[i]==2)*-0.135261
						+as.integer(test$day[i]==3)*-0.059559
						+as.integer(test$day[i]==4)*0.021609
						+as.integer(test$day[i]==5)*0.066878))
		} else if(test$hour[i]>6 & test$hour[i]<=13){
			submission[i,2] = max(0,exp(5.554851
						+as.integer(test$season[i]==2)*0.329789
						+as.integer(test$season[i]==3)*0.282519
						+as.integer(test$season[i]==4)*0.464723
						+as.integer(test$holiday[i]==1)*0.061016
						+as.integer(test$weather[i]==2)*-0.046497
						+as.integer(test$weather[i]==3)*-0.598558
						+test$temp[i]*-0.043041
						+test$atemp[i]*0.057368
						+test$humidity[i]*-0.001385
						+test$windspeed[i]*-0.001519
						+test$hour[i]*-0.077788
						+as.integer(test$day[i]==2)*0.005884
						+as.integer(test$day[i]==3)*0.037604
						+as.integer(test$day[i]==4)*0.080710
						+as.integer(test$day[i]==5)*0.094545))
		} else {
			submission[i,2] = max(0,exp(3.5880672
						+as.integer(test$season[i]==2)*0.2796333
						+as.integer(test$season[i]==3)*0.2225579
						+as.integer(test$season[i]==4)*0.4743010
						+as.integer(test$holiday[i]==1)*-0.0217482
						+as.integer(test$weather[i]==2)*-0.0213004
						+as.integer(test$weather[i]==3)*-0.2749172
						+as.integer(test$weather[i]==4)*0.1966790
						+test$temp[i]*-0.0192585
						+test$atemp[i]*0.0509824
						+test$humidity[i]*-0.0060865
						+test$windspeed[i]*-0.0006525
						+test$hour[i]*0.0757447
						+as.integer(test$day[i]==2)*0.0575751
						+as.integer(test$day[i]==3)*0.0667446
						+as.integer(test$day[i]==4)*0.0598289
						+as.integer(test$day[i]==5)*0.0592517))
		}
	} else {
		if (test$hour[i]<=6 | test$hour[i]>20){
			submission[i,2] = max(0,exp(2.753416
						+as.integer(test$season[i]==2)*0.260261
						+as.integer(test$season[i]==3)*0.123534
						+as.integer(test$season[i]==4)*0.502101
						+as.integer(test$holiday[i]==1)*-0.424731
						+as.integer(test$workingday[i]==1)*-0.076721
						+as.integer(test$weather[i]==2)*-0.070580
						+as.integer(test$weather[i]==3)*-0.358851
						+test$temp[i]*0.070847
						+test$atemp[i]*-0.012228
						+test$humidity[i]*-0.006433
						+test$windspeed[i]*-0.010031
						+test$hour[i]*0.062011))
		} else if(test$hour[i]>6 & test$hour[i]<=13){
			submission[i,2] = max(0,exp(4.497087
						+as.integer(test$season[i]==2)*0.237913
						+as.integer(test$season[i]==3)*0.086880
						+as.integer(test$season[i]==4)*0.390759
						+as.integer(test$holiday[i]==1)*-0.279256
						+as.integer(test$workingday[i]==1)*0.031551
						+as.integer(test$weather[i]==2)*-0.044564
						+as.integer(test$weather[i]==3)*-0.676798
						+test$temp[i]*0.021950
						+test$atemp[i]*0.007736
						+test$humidity[i]*-0.003002
						+test$windspeed[i]*-0.005392
						+test$hour[i]*0.047104))
		} else {
			submission[i,2] = max(0,exp(5.2879291
						+as.integer(test$season[i]==2)*0.3257528
						+as.integer(test$season[i]==3)*0.2250004
						+as.integer(test$season[i]==4)*0.4955032
						+as.integer(test$holiday[i]==1)*-0.3452564
						+as.integer(test$workingday[i]==1)*-0.0097681
						+as.integer(test$weather[i]==2)*0.0120785
						+as.integer(test$weather[i]==3)*-0.2094366
						+test$temp[i]*0.0238912
						+test$atemp[i]*0.0101855
						+test$humidity[i]*-0.0067173
						+test$windspeed[i]*0.0004933
						+test$hour[i]*-0.0162442))
		}
	}
}

write.csv(submission, file = "./Résultats/linear_poisson_corrected_decoupagejournee_factor_model.csv", row.names=FALSE)
